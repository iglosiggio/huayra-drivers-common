#!/usr/bin/python3

import sys
import os.path
import unittest
import subprocess

import gi
gi.require_version('UMockdev', '1.0')
from gi.repository import UMockdev

srcdir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
testsdir = os.path.join(srcdir, 'tests')
sys.path.append(testsdir)

def program_out(argv):
    '''Return (exitcode, out, err) from a program call.'''

    prog = subprocess.Popen(argv, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE, universal_newlines=True)
    (out, err) = prog.communicate()
    return (prog.returncode, out, err)

def program_out_success(argv, self):
    '''Return out from a successful program call.'''

    (code, out, err) = program_out(argv)
    self.assertEqual(err, '')
    self.assertEqual(code, 0)
    return out

class TestSystem(unittest.TestCase):
    '''Run huayra-drivers on the current system.

    We cannot assume anything about the output here, we just ensure that the
    program is found and works.
    '''
    def test_list(self):
        '''huayra-drivers list succeeds'''

        program_out_success(['huayra-drivers', 'list'], self)

    def test_debug(self):
        '''huayra-drivers debug succeeds'''

        o = program_out_success(['huayra-drivers', 'debug'], self)

        # let's assume we have at least one pci device
        self.assertTrue('\npci:' in o)

        # finds detection plugins
        self.assertTrue('Loading custom detection plugin' in o, o)
        self.assertTrue('sl-modem' in o, o)
        self.assertTrue('=== matching driver packages ===' in o, o)

class TestHuayraDrivers(unittest.TestCase):
    '''Check that we can detect and install an actual driver packge'''

    @classmethod
    def setUpClass(cls):
        '''Raise an exception if kernel headers are not installed.

        It could be a @unittest.skip class method but we want a failure
        because missing headers would mean a broken test environment.
        '''
        assert os.path.exists('/usr/src/linux-headers-' + os.uname()[2]), \
               'Headers not installed for running kernel (%s)' % os.uname()[2]

    def setUp(self):
        self.testbed = UMockdev.Testbed.new()

    def test_bcmwl(self):
        '''bcmwl'''

        self.do_test_driver('pci:v000014E4d00004353sv00sd01bc02sc80i00',
                'bcmwl-kernel-source', 'wl', auto_install=False)

    def do_test_driver(self, alias, package, module, auto_install=True,
                       allow_errors=False, extra_purge=[]):
        if alias:
            self.testbed.add_device('pci', 'mydev', None, ['modalias', alias], [])

            # detection works
            o = program_out_success(['huayra-drivers', 'list'], self)
            self.assertTrue(package + '\n' in o, o)

        try:
            if auto_install:
                # autoinstall works
                (c, o, e) = program_out(['huayra-drivers', 'autoinstall'])
                self.assertEqual(c, 0, e)
                if not allow_errors:
                    self.assertEqual(e, '')
            else:
                (c, o, e) = program_out(['apt-get', 'install', '-y', package])
                self.assertEqual(c, 0, e)
                if e:
                    print('\n--- Error output from package installation ---\n%s\n------' % e)
            self.assertTrue(package in o, o)

            # package is installed
            o = program_out_success(['dpkg', '-s', package], self)
            self.assertTrue('Status: install ok installed' in o)

            # module is available
            if module:
                o = program_out_success(['modinfo', module], self)
                self.assertTrue('filename:' in o)
        finally:
            # clean up
            program_out(['apt-get', 'purge', '-y', package] + extra_purge)

            if module:
                (c, o, e) = program_out(['modinfo', module])
                self.assertNotEqual(c, 0)
                self.assertIn('ERROR', e)
                self.assertIn('not found', e)
                self.assertEqual(o, '', o)

# run ourselves through umockdev-wrapper
if 'umockdev' not in os.environ.get('LD_PRELOAD', ''):
    os.execvp('umockdev-wrapper', ['umockdev-wrapper'] + sys.argv)

# avoid debconf errors
os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

# for autopkgtest we must write to stdout, not stderr, and have an appropriate
# exit code
unittest.main(testRunner=unittest.TextTestRunner(stream=sys.stdout, verbosity=2))
